import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import zipfile
import os
from google.colab import drive
drive.mount('/content/drive')
zip_path = '/content/drive/MyDrive/archive (9).zip'
extract_dir = '/content/dataset'

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)
import os
from sklearn.model_selection import train_test_split
data_dir_no = os.path.join(extract_dir, 'no')
data_dir_yes = os.path.join(extract_dir, 'yes')
image_paths_no = [os.path.join(data_dir_no, f) for f in os.listdir(data_dir_no) if f.endswith('.jpg')]
image_paths_yes = [os.path.join(data_dir_yes, f) for f in os.listdir(data_dir_yes) if f.endswith('.jpg')]
train_paths_no, test_paths_no = train_test_split(image_paths_no, test_size=0.2, random_state=42)
train_paths_yes, test_paths_yes = train_test_split(image_paths_yes, test_size=0.2, random_state=42)
train_data_dir = os.path.join(extract_dir, 'train')
test_data_dir = os.path.join(extract_dir, 'test')

os.makedirs(train_data_dir, exist_ok=True)
os.makedirs(os.path.join(train_data_dir, 'no'), exist_ok=True)
os.makedirs(os.path.join(train_data_dir, 'yes'), exist_ok=True)
os.makedirs(test_data_dir, exist_ok=True)
os.makedirs(os.path.join(test_data_dir, 'no'), exist_ok=True)
os.makedirs(os.path.join(test_data_dir, 'yes'), exist_ok=True)

import shutil

for path in train_paths_no:
    shutil.copy(path, os.path.join(train_data_dir, 'no'))
for path in train_paths_yes:
    shutil.copy(path, os.path.join(train_data_dir, 'yes'))

for path in test_paths_no:
    shutil.copy(path, os.path.join(test_data_dir, 'no'))
for path in test_paths_yes:
    shutil.copy(path, os.path.join(test_data_dir, 'yes'))

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)


model = Sequential([
    # 1st Conv Layer
    Conv2D(64, (3, 3), activation='relu', input_shape=(150, 150, 3), padding='same'),
    MaxPooling2D(pool_size=(2, 2)),

    # 2nd Conv Layer
    Conv2D(128, (3, 3), activation='relu', padding='same'),
    MaxPooling2D(pool_size=(2, 2)),

    # 3rd Conv Layer
    Conv2D(256, (3, 3), activation='relu', padding='same'),
    MaxPooling2D(pool_size=(2, 2)),

    # 4th Conv Layer
    Conv2D(512, (3, 3), activation='relu', padding='same'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.3),  # Dropout to prevent overfitting

    # 5th Conv Layer
    Conv2D(512, (3, 3), activation='relu', padding='same'),

    # 6th Conv Layer
    Conv2D(256, (3, 3), activation='relu', padding='same'),

    # 7th Conv Layer
    Conv2D(128, (3, 3), activation='relu', padding='same'),

    # 8th Conv Layer
    Conv2D(64, (3, 3), activation='relu', padding='same'),

    Flatten(),

    # Dense layers with dropout
    Dense(512, activation='relu'),
    Dropout(0.5),  # Dropout to the dense layers
    Dense(256, activation='relu'),
    Dense(1, activation='sigmoid')  # Output layer for binary classification
])

# Display model architecture
model.summary()

# Compile the model with a lower learning rate
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(
    train_generator,
    epochs=3,
    steps_per_epoch=len(train_generator),
    validation_data=test_generator,
    validation_steps=len(test_generator)
)
loss, accuracy = model.evaluate(test_generator)
print(f"Test Loss: {loss}")
print(f"Test Accuracy: {accuracy}")

# Plot training accuracy values
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Plot training loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Save the model
model.save('/content/brain_tumor_model_advanced.h5')
